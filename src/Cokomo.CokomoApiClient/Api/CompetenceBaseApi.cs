/*
 * Cokomo Public Api
 *
 * ## ðŸ‘‰ [Please see the CoKoMo documentation for more information.](https://cokomo-it.de/docs/start/api/documentation/)
 *
 * The version of the OpenAPI document: v1
 * Contact: cokomo-team@haw-hamburg.de
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using CoKoMo.CoKoMoApiClient.Client;
using CoKoMo.CoKoMoApiClient.Model;

namespace CoKoMo.CoKoMoApiClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICompetenceBaseApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="CoKoMo.CoKoMoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CompetenceBase</returns>
        CompetenceBase CompetenceBaseIdDetailsGet(string id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoKoMo.CoKoMoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CompetenceBase</returns>
        ApiResponse<CompetenceBase> CompetenceBaseIdDetailsGetWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="CoKoMo.CoKoMoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CompetenceBase</returns>
        CompetenceBase CompetenceBaseIdGet(string id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoKoMo.CoKoMoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CompetenceBase</returns>
        ApiResponse<CompetenceBase> CompetenceBaseIdGetWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="CoKoMo.CoKoMoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="depth"> (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Neighbour</returns>
        Neighbour CompetenceBaseIdNeighboursGet(string id, int? depth = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoKoMo.CoKoMoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="depth"> (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Neighbour</returns>
        ApiResponse<Neighbour> CompetenceBaseIdNeighboursGetWithHttpInfo(string id, int? depth = default(int?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICompetenceBaseApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoKoMo.CoKoMoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompetenceBase</returns>
        System.Threading.Tasks.Task<CompetenceBase> CompetenceBaseIdDetailsGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoKoMo.CoKoMoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompetenceBase)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompetenceBase>> CompetenceBaseIdDetailsGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoKoMo.CoKoMoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompetenceBase</returns>
        System.Threading.Tasks.Task<CompetenceBase> CompetenceBaseIdGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoKoMo.CoKoMoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompetenceBase)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompetenceBase>> CompetenceBaseIdGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoKoMo.CoKoMoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="depth"> (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Neighbour</returns>
        System.Threading.Tasks.Task<Neighbour> CompetenceBaseIdNeighboursGetAsync(string id, int? depth = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoKoMo.CoKoMoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="depth"> (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Neighbour)</returns>
        System.Threading.Tasks.Task<ApiResponse<Neighbour>> CompetenceBaseIdNeighboursGetWithHttpInfoAsync(string id, int? depth = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICompetenceBaseApi : ICompetenceBaseApiSync, ICompetenceBaseApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CompetenceBaseApi : ICompetenceBaseApi
    {
        private CoKoMo.CoKoMoApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CompetenceBaseApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CompetenceBaseApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CompetenceBaseApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CompetenceBaseApi(string basePath)
        {
            this.Configuration = CoKoMo.CoKoMoApiClient.Client.Configuration.MergeConfigurations(
                CoKoMo.CoKoMoApiClient.Client.GlobalConfiguration.Instance,
                new CoKoMo.CoKoMoApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new CoKoMo.CoKoMoApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CoKoMo.CoKoMoApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = CoKoMo.CoKoMoApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CompetenceBaseApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CompetenceBaseApi(CoKoMo.CoKoMoApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = CoKoMo.CoKoMoApiClient.Client.Configuration.MergeConfigurations(
                CoKoMo.CoKoMoApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new CoKoMo.CoKoMoApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CoKoMo.CoKoMoApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = CoKoMo.CoKoMoApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CompetenceBaseApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CompetenceBaseApi(CoKoMo.CoKoMoApiClient.Client.ISynchronousClient client, CoKoMo.CoKoMoApiClient.Client.IAsynchronousClient asyncClient, CoKoMo.CoKoMoApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = CoKoMo.CoKoMoApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public CoKoMo.CoKoMoApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public CoKoMo.CoKoMoApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CoKoMo.CoKoMoApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CoKoMo.CoKoMoApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CoKoMo.CoKoMoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CompetenceBase</returns>
        public CompetenceBase CompetenceBaseIdDetailsGet(string id, int operationIndex = 0)
        {
            CoKoMo.CoKoMoApiClient.Client.ApiResponse<CompetenceBase> localVarResponse = CompetenceBaseIdDetailsGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CoKoMo.CoKoMoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CompetenceBase</returns>
        public CoKoMo.CoKoMoApiClient.Client.ApiResponse<CompetenceBase> CompetenceBaseIdDetailsGetWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new CoKoMo.CoKoMoApiClient.Client.ApiException(400, "Missing required parameter 'id' when calling CompetenceBaseApi->CompetenceBaseIdDetailsGet");
            }

            CoKoMo.CoKoMoApiClient.Client.RequestOptions localVarRequestOptions = new CoKoMo.CoKoMoApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoKoMo.CoKoMoApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoKoMo.CoKoMoApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", CoKoMo.CoKoMoApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "CompetenceBaseApi.CompetenceBaseIdDetailsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CompetenceBase>("/CompetenceBase/{id}/details", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CompetenceBaseIdDetailsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CoKoMo.CoKoMoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompetenceBase</returns>
        public async System.Threading.Tasks.Task<CompetenceBase> CompetenceBaseIdDetailsGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoKoMo.CoKoMoApiClient.Client.ApiResponse<CompetenceBase> localVarResponse = await CompetenceBaseIdDetailsGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CoKoMo.CoKoMoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompetenceBase)</returns>
        public async System.Threading.Tasks.Task<CoKoMo.CoKoMoApiClient.Client.ApiResponse<CompetenceBase>> CompetenceBaseIdDetailsGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new CoKoMo.CoKoMoApiClient.Client.ApiException(400, "Missing required parameter 'id' when calling CompetenceBaseApi->CompetenceBaseIdDetailsGet");
            }


            CoKoMo.CoKoMoApiClient.Client.RequestOptions localVarRequestOptions = new CoKoMo.CoKoMoApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoKoMo.CoKoMoApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoKoMo.CoKoMoApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", CoKoMo.CoKoMoApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "CompetenceBaseApi.CompetenceBaseIdDetailsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CompetenceBase>("/CompetenceBase/{id}/details", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CompetenceBaseIdDetailsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CoKoMo.CoKoMoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CompetenceBase</returns>
        public CompetenceBase CompetenceBaseIdGet(string id, int operationIndex = 0)
        {
            CoKoMo.CoKoMoApiClient.Client.ApiResponse<CompetenceBase> localVarResponse = CompetenceBaseIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CoKoMo.CoKoMoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CompetenceBase</returns>
        public CoKoMo.CoKoMoApiClient.Client.ApiResponse<CompetenceBase> CompetenceBaseIdGetWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new CoKoMo.CoKoMoApiClient.Client.ApiException(400, "Missing required parameter 'id' when calling CompetenceBaseApi->CompetenceBaseIdGet");
            }

            CoKoMo.CoKoMoApiClient.Client.RequestOptions localVarRequestOptions = new CoKoMo.CoKoMoApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoKoMo.CoKoMoApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoKoMo.CoKoMoApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", CoKoMo.CoKoMoApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "CompetenceBaseApi.CompetenceBaseIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CompetenceBase>("/CompetenceBase/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CompetenceBaseIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CoKoMo.CoKoMoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompetenceBase</returns>
        public async System.Threading.Tasks.Task<CompetenceBase> CompetenceBaseIdGetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoKoMo.CoKoMoApiClient.Client.ApiResponse<CompetenceBase> localVarResponse = await CompetenceBaseIdGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CoKoMo.CoKoMoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompetenceBase)</returns>
        public async System.Threading.Tasks.Task<CoKoMo.CoKoMoApiClient.Client.ApiResponse<CompetenceBase>> CompetenceBaseIdGetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new CoKoMo.CoKoMoApiClient.Client.ApiException(400, "Missing required parameter 'id' when calling CompetenceBaseApi->CompetenceBaseIdGet");
            }


            CoKoMo.CoKoMoApiClient.Client.RequestOptions localVarRequestOptions = new CoKoMo.CoKoMoApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoKoMo.CoKoMoApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoKoMo.CoKoMoApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", CoKoMo.CoKoMoApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "CompetenceBaseApi.CompetenceBaseIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CompetenceBase>("/CompetenceBase/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CompetenceBaseIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CoKoMo.CoKoMoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="depth"> (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Neighbour</returns>
        public Neighbour CompetenceBaseIdNeighboursGet(string id, int? depth = default(int?), int operationIndex = 0)
        {
            CoKoMo.CoKoMoApiClient.Client.ApiResponse<Neighbour> localVarResponse = CompetenceBaseIdNeighboursGetWithHttpInfo(id, depth);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CoKoMo.CoKoMoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="depth"> (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Neighbour</returns>
        public CoKoMo.CoKoMoApiClient.Client.ApiResponse<Neighbour> CompetenceBaseIdNeighboursGetWithHttpInfo(string id, int? depth = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new CoKoMo.CoKoMoApiClient.Client.ApiException(400, "Missing required parameter 'id' when calling CompetenceBaseApi->CompetenceBaseIdNeighboursGet");
            }

            CoKoMo.CoKoMoApiClient.Client.RequestOptions localVarRequestOptions = new CoKoMo.CoKoMoApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoKoMo.CoKoMoApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoKoMo.CoKoMoApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", CoKoMo.CoKoMoApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (depth != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoKoMo.CoKoMoApiClient.Client.ClientUtils.ParameterToMultiMap("", "depth", depth));
            }

            localVarRequestOptions.Operation = "CompetenceBaseApi.CompetenceBaseIdNeighboursGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Neighbour>("/CompetenceBase/{id}/neighbours", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CompetenceBaseIdNeighboursGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CoKoMo.CoKoMoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="depth"> (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Neighbour</returns>
        public async System.Threading.Tasks.Task<Neighbour> CompetenceBaseIdNeighboursGetAsync(string id, int? depth = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoKoMo.CoKoMoApiClient.Client.ApiResponse<Neighbour> localVarResponse = await CompetenceBaseIdNeighboursGetWithHttpInfoAsync(id, depth, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CoKoMo.CoKoMoApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="depth"> (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Neighbour)</returns>
        public async System.Threading.Tasks.Task<CoKoMo.CoKoMoApiClient.Client.ApiResponse<Neighbour>> CompetenceBaseIdNeighboursGetWithHttpInfoAsync(string id, int? depth = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new CoKoMo.CoKoMoApiClient.Client.ApiException(400, "Missing required parameter 'id' when calling CompetenceBaseApi->CompetenceBaseIdNeighboursGet");
            }


            CoKoMo.CoKoMoApiClient.Client.RequestOptions localVarRequestOptions = new CoKoMo.CoKoMoApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoKoMo.CoKoMoApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoKoMo.CoKoMoApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", CoKoMo.CoKoMoApiClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (depth != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoKoMo.CoKoMoApiClient.Client.ClientUtils.ParameterToMultiMap("", "depth", depth));
            }

            localVarRequestOptions.Operation = "CompetenceBaseApi.CompetenceBaseIdNeighboursGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Neighbour>("/CompetenceBase/{id}/neighbours", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CompetenceBaseIdNeighboursGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
