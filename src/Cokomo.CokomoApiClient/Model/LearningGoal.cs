/*
 * Cokomo Public Api
 *
 * ## ðŸ‘‰ [Please see the CoKoMo documentation for more information.](https://cokomo-it.de/docs/start/api/documentation/)
 *
 * The version of the OpenAPI document: v1
 * Contact: cokomo-team@haw-hamburg.de
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CoKoMo.CoKoMoApiClient.Client.OpenAPIDateConverter;

namespace CoKoMo.CoKoMoApiClient.Model
{
    /// <summary>
    /// LearningGoal
    /// </summary>
    [DataContract(Name = "LearningGoal")]
    public partial class LearningGoal : IEquatable<LearningGoal>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LearningGoal" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="type">type.</param>
        /// <param name="underlyingCompetenceBase">underlyingCompetenceBase.</param>
        /// <param name="associatedCompetenceLevel">associatedCompetenceLevel.</param>
        public LearningGoal(string id = default(string), string type = default(string), CompetenceBase underlyingCompetenceBase = default(CompetenceBase), CompetenceLevel associatedCompetenceLevel = default(CompetenceLevel))
        {
            this.Id = id;
            this.Type = type;
            this.UnderlyingCompetenceBase = underlyingCompetenceBase;
            this.AssociatedCompetenceLevel = associatedCompetenceLevel;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets UnderlyingCompetenceBase
        /// </summary>
        [DataMember(Name = "underlyingCompetenceBase", EmitDefaultValue = false)]
        public CompetenceBase UnderlyingCompetenceBase { get; set; }

        /// <summary>
        /// Gets or Sets AssociatedCompetenceLevel
        /// </summary>
        [DataMember(Name = "associatedCompetenceLevel", EmitDefaultValue = false)]
        public CompetenceLevel AssociatedCompetenceLevel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LearningGoal {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UnderlyingCompetenceBase: ").Append(UnderlyingCompetenceBase).Append("\n");
            sb.Append("  AssociatedCompetenceLevel: ").Append(AssociatedCompetenceLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LearningGoal);
        }

        /// <summary>
        /// Returns true if LearningGoal instances are equal
        /// </summary>
        /// <param name="input">Instance of LearningGoal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LearningGoal input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.UnderlyingCompetenceBase == input.UnderlyingCompetenceBase ||
                    (this.UnderlyingCompetenceBase != null &&
                    this.UnderlyingCompetenceBase.Equals(input.UnderlyingCompetenceBase))
                ) && 
                (
                    this.AssociatedCompetenceLevel == input.AssociatedCompetenceLevel ||
                    (this.AssociatedCompetenceLevel != null &&
                    this.AssociatedCompetenceLevel.Equals(input.AssociatedCompetenceLevel))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.UnderlyingCompetenceBase != null)
                {
                    hashCode = (hashCode * 59) + this.UnderlyingCompetenceBase.GetHashCode();
                }
                if (this.AssociatedCompetenceLevel != null)
                {
                    hashCode = (hashCode * 59) + this.AssociatedCompetenceLevel.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
